class Solution{
    
    void store(vector<vector<int>> &board, vector<vector<int>> &ans, int n)//store 2D matrix elements
{
    vector<int> v;
    for(int i=0;i<n;i++)
    {
      for (int j = 0; j < n; j++)
    {
        if(board[i][j] == 1)
        v.push_back(j+1);
    }
    }
    ans.push_back(v);
}

bool is_safe(int row, int col, vector<vector<int>> &board, int n)
{
    int x= row, y= col;
    //check for same row
    while(y >= 0)
    {
        if(board[x][y] == 1)
        return false;

        y--;
    }

    x= row;
    y= col;
    
    //check for diagonal
    while(x>=0 and y>=0)
    {
        if(board[x][y] == 1)
        return false;

        y--;
        x--;
    }
    
    x=row;
    y=col;

    //check for diagonal
    while(x<n and y>=0)
    {
        if(board[x][y] == 1)
        return false;

        y--;
        x++;
    }
    return true;

}
void solve(int col, vector<vector<int>> &ans, vector<vector<int>> &board, int n)  
{
    //base case
    if(col == n)
    {
        store(board, ans, n);
        return;
    }

    for(int row=0; row<n; row++)
    {
      if (is_safe(row, col, board, n)) {
        board[row][col] = 1;

        solve(col + 1, ans, board, n);//iss call se humei ab harr column ke liye check krne ki need nahi

        board[row][col] = 0;//Backtracking
      }
    }
}
    
public:
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>> board(n, vector<int> (n,0));

    vector<vector<int>> ans;

    solve(0, ans, board, n);
    sort(ans.begin(), ans.end());
    return ans;
    }
};
